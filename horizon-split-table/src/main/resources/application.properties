spring.shardingsphere.datasource.names=m1
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://192.168.200.128:3306/order_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m1.password=1234
spring.shardingsphere.datasource.m1.username=root

# 't_order'\u662F\u6570\u636E\u8868\u524D\u7F00
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m1.t_order_$->{1..2}
# \u4E3B\u952E\u5217 \u91C7\u7528\u96EA\u82B1\u751F\u6210\u4E3B\u952E
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE  # \u4F7F\u7528\u96EA\u82B1
# \u81EA\u5B9A\u4E49
spring.shardingsphere.sharding.tables.t_order.key-generator.type=DIY_ID_GENERATOR

spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id%2+1}

# \u6253\u5370sql
spring.shardingsphere.props.sql.show=true


spring.main.allow-bean-definition-overriding=true
